<?xml version="1.0" encoding="utf-8"?>
<f:PanelScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:f="library://ns.feathersui.com/mxml"
			   transitionInComplete="transitionComplete(event)">
	
	<!--
	This screen will connect to the web API and show a list of recent earthquakes.
	It reads the values that we passed from the previous screen in the goNextScreen function.
	It also remembers which earthquake was selected and automatically scrolls to it.
	-->
	<fx:Script>
		<![CDATA[
			import feathers.data.ListCollection;
			
			import flash.events.Event;
			
			import starling.events.Event;
			
			public static const GO_QUAKE_DETAILS:String = "goQuakeDetails";
			
			/*
			This variable and the next 2 functions are boilerplate code that will create a getter and setter for the 'data' property.
			The other screens contain the same code since they will also require this property to correctly function.
			*/
			protected var _data:NavigatorData;
			
			public function get data():NavigatorData
			{
				return this._data;
			}
			
			public function set data(value:NavigatorData):void
			{
				this._data = value;
			}
			
			/*
			The header title for this screen is dynamic, it is composed by 2 Strings:
			"Earthquakes, " and the title that was passed in the function showNextScreen()
			*/	
			protected function transitionComplete(event:starling.events.Event):void
			{
				title = "All Earthquakes, " + _data.selectedLabel;
				backButtonHandler = goBack; //The goBack function will be called when the Back button is pressed on an Android device.
				
				/*
				We check if there's saved data, if not we request fresh one
				In case there's existing data we will scroll to the previously selected earthquake.
				*/
				if (_data.dataProvider) {
					quakesList.dataProvider = _data.dataProvider;
					quakesList.scrollToDisplayIndex(_data.selectedIndex);
					quakesList.selectedIndex = _data.selectedIndex;
					quakesList.addEventListener(starling.events.Event.CHANGE, changeHandler);
				} else {
					
					/*
					This is the most basic way to connect to a web API. We create an URLRequest
					with the URL passed from the goNextScreen function.
					Then we create an URLLoader and pass the URLRequest as its parameter.
					Notice that the URLLoader listens to a flash.events.Event.COMPLETE event
					be careful to not use a starling.events.Event.COMPLETE event.
					*/
					var request:URLRequest = new URLRequest(_data.selectedURL);
					var loader:URLLoader = new URLLoader();
					loader.addEventListener(flash.events.Event.COMPLETE, quakesLoaded);
					loader.load(request);
				}
			}
			
			/*
			Once we receive the response from the web API we convert it to an AS3 Object using the JSON class.
			Then we create the DataProvider for the List by casting the AS3 Object as an Array.
			We finally dispose of the JSON object since it is not needed anymore and we add an event listener to the list
			so it can know when an item has been selected.
			*/
			private function quakesLoaded(event:flash.events.Event):void
			{
				event.currentTarget.removeEventListener(flash.events.Event.COMPLETE, quakesLoaded);
				
				var rawData:Object = JSON.parse(event.currentTarget.data);
				quakesList.dataProvider = new ListCollection(rawData.features as Array);
				rawData = null;
				
				quakesList.addEventListener(starling.events.Event.CHANGE, changeHandler);
			}
			
			/*
			When an item from the list gets selected we want to save which one was pressed and what was its index.
			We also store a copy of the data provider so we can restore it faster and avoid calling the API again.
			*/
			private function changeHandler(event:starling.events.Event):void
			{
				quakesList.removeEventListener(starling.events.Event.CHANGE, changeHandler);
				_data.selectedQuake = quakesList.selectedItem;
				_data.selectedIndex = quakesList.selectedIndex;
				_data.dataProvider = quakesList.dataProvider;
				this.dispatchEventWith(GO_QUAKE_DETAILS);
			}
			
			/*
			The goBack function is rather simple. It cleans out variables and properties that are not going to be used anymore.
			*/
			private function goBack():void
			{
				_data.dataProvider = null;
				_data.selectedIndex = null;
				
				this.dispatchEventWith(starling.events.Event.COMPLETE);
			}			
			
		]]>
	</fx:Script>
	
	<!-- This MXML code is used to add UI controls to the left side of the Header -->
	<f:headerProperties>
		<fx:Object>
			<fx:leftItems>
				<fx:Vector type="starling.display.DisplayObject">
					<f:Button styleName="back-button" triggered="goBack()"/>
				</fx:Vector>
			</fx:leftItems>
		</fx:Object>
	</f:headerProperties>
	
	<f:layout>
		<f:VerticalLayout />
	</f:layout>
	
	<!-- The QuakeRenderer value represents the QuakeRenderer.as file -->
	<f:List id="quakesList" itemRendererType="QuakeRenderer">
		<f:layoutData>
			<f:VerticalLayoutData percentWidth="100" percentHeight="100"/>
		</f:layoutData>
	</f:List>
	
</f:PanelScreen>